#!/usr/bin/env python3.8
# @generated by pegen from test.gram

import ast
import sys
import tokenize

from typing import Any, Optional

from pegen.parser import memoize, memoize_left_rec, logger, Parser
# Keywords and soft keywords are listed at the end of the parser definition.
class GeneratedParser(Parser):

    @memoize
    def start(self) -> Optional[ast . Module]:
        # start: expr_stmt* $
        mark = self._mark()
        if (
            (a := self._loop0_1(),)
            and
            (self.expect('ENDMARKER'))
        ):
            return ast . Module ( body = a ) or [];
        self._reset(mark)
        return None;

    @memoize
    def expr_stmt(self) -> Optional[Any]:
        # expr_stmt: atom NEWLINE
        mark = self._mark()
        if (
            (a := self.atom())
            and
            (self.expect('NEWLINE'))
        ):
            return ast . Expr ( value = a );
        self._reset(mark)
        return None;

    @memoize
    def atom(self) -> Optional[Any]:
        # atom: 'a'
        mark = self._mark()
        if (
            (self.expect('a'))
        ):
            return ast . Name ( id = 'a' );
        self._reset(mark)
        return None;

    @memoize
    def _loop0_1(self) -> Optional[Any]:
        # _loop0_1: expr_stmt
        mark = self._mark()
        children = []
        while (
            (expr_stmt := self.expr_stmt())
        ):
            children.append(expr_stmt)
            mark = self._mark()
        self._reset(mark)
        return children;

    KEYWORDS = ('a',)
    SOFT_KEYWORDS = ()


if __name__ == '__main__':
    from pegen.parser import simple_parser_main
    simple_parser_main(GeneratedParser)
