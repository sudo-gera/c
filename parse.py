#!/usr/bin/env python3.8
# @generated by pegen from test.gram

import ast
import sys
import tokenize

from typing import Any, Optional

from pegen.parser import memoize, memoize_left_rec, logger, Parser
# Keywords and soft keywords are listed at the end of the parser definition.
class GeneratedParser(Parser):

    @memoize
    def start(self) -> Optional[ast . Module]:
        # start: expr_stmt* $
        mark = self._mark()
        if (
            (a := self._loop0_1(),)
            and
            (self.expect('ENDMARKER'))
        ):
            return ast . Module ( body = a ) or [];
        self._reset(mark)
        return None;

    @memoize
    def expr_stmt(self) -> Optional[Any]:
        # expr_stmt: expr NEWLINE
        mark = self._mark()
        if (
            (a := self.expr())
            and
            (self.expect('NEWLINE'))
        ):
            return ast . Expr ( value = a );
        self._reset(mark)
        return None;

    @memoize_left_rec
    def expr(self) -> Optional[Any]:
        # expr: expr '+' term | expr '-' term | term
        mark = self._mark()
        if (
            (l := self.expr())
            and
            (self.expect('+'))
            and
            (r := self.term())
        ):
            return ast . BinOp ( left = l , op = ast . Add ( ) , right = r );
        self._reset(mark)
        if (
            (l := self.expr())
            and
            (self.expect('-'))
            and
            (r := self.term())
        ):
            return ast . BinOp ( left = l , op = ast . Sub ( ) , right = r );
        self._reset(mark)
        if (
            (term := self.term())
        ):
            return term;
        self._reset(mark)
        return None;

    @memoize_left_rec
    def term(self) -> Optional[Any]:
        # term: term '*' factor | term '/' factor | factor
        mark = self._mark()
        if (
            (l := self.term())
            and
            (self.expect('*'))
            and
            (r := self.factor())
        ):
            return ast . BinOp ( left = l , op = ast . Mult ( ) , right = r );
        self._reset(mark)
        if (
            (l := self.term())
            and
            (self.expect('/'))
            and
            (r := self.factor())
        ):
            return ast . BinOp ( left = l , op = ast . Div ( ) , right = r );
        self._reset(mark)
        if (
            (factor := self.factor())
        ):
            return factor;
        self._reset(mark)
        return None;

    @memoize
    def factor(self) -> Optional[Any]:
        # factor: '(' expr ')' | atom
        mark = self._mark()
        if (
            (self.expect('('))
            and
            (e := self.expr())
            and
            (self.expect(')'))
        ):
            return e;
        self._reset(mark)
        if (
            (atom := self.atom())
        ):
            return atom;
        self._reset(mark)
        return None;

    @memoize
    def atom(self) -> Optional[Any]:
        # atom: NAME | NUMBER
        mark = self._mark()
        if (
            (name := self.name())
        ):
            return name;
        self._reset(mark)
        if (
            (number := self.number())
        ):
            return number;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_1(self) -> Optional[Any]:
        # _loop0_1: expr_stmt
        mark = self._mark()
        children = []
        while (
            (expr_stmt := self.expr_stmt())
        ):
            children.append(expr_stmt)
            mark = self._mark()
        self._reset(mark)
        return children;

    KEYWORDS = ()
    SOFT_KEYWORDS = ()


if __name__ == '__main__':
    from pegen.parser import simple_parser_main
    simple_parser_main(GeneratedParser)
